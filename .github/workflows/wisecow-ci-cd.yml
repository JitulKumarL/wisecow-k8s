name: Wisecow CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  # IMAGE_NAME: ${{ github.repository }}
  BUILD_CONTEXT: "./Problem Statement 1 - Solution"
  DOCKERFILE: "./Problem Statement 1 - Solution/Dockerfile"
  MANIFEST_DIR: "./Problem Statement 1 - Solution/k8s-manifests"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set lowercase image name
      run: echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.BUILD_CONTEXT }}
        file: ${{ env.DOCKERFILE }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test container functionality
      run: |
        docker run --rm -d -p 4499:4499 --name test-wisecow ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        for i in {1..10}; do
          if curl -sf http://localhost:4499 >/dev/null; then
            echo "Container test passed"
            docker stop test-wisecow
            exit 0
          fi
          echo "Waiting for application... (attempt $i/10)"
          sleep 3
        done
        echo "Container test failed"
        docker logs test-wisecow || true
        docker stop test-wisecow
        exit 1

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set lowercase image name
      run: echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  validate-manifests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Validate Kubernetes manifests
      env:
        MANIFEST_DIR: ${{ env.MANIFEST_DIR }}
      run: |
        echo "Validating Kubernetes manifests in ${MANIFEST_DIR}..."
        if [ ! -d "${MANIFEST_DIR}" ]; then
          echo "k8s-manifests directory not found at ${MANIFEST_DIR}"
          exit 1
        fi
        manifest_files=$(find "${MANIFEST_DIR}" -name "*.yaml" -type f)
        if [ -z "$manifest_files" ]; then
          echo "No YAML files found in ${MANIFEST_DIR}/"
          exit 1
        fi
        pip3 install PyYAML > /dev/null 2>&1 || {
          echo "Warning: Could not install PyYAML, using basic validation"
          for manifest in $manifest_files; do
            echo "Basic validation: $manifest..."
            grep -q "apiVersion:" "$manifest" || { echo "Missing apiVersion in $manifest"; exit 1; }
            grep -q "kind:" "$manifest" || { echo "Missing kind in $manifest"; exit 1; }
            echo "$manifest passed basic validation"
          done
          echo "All manifests passed basic validation!"
          exit 0
        }
        python3 - <<'EOF'
        import yaml, os, glob, sys
        md = os.environ.get('MANIFEST_DIR', 'k8s-manifests')
        files = glob.glob(os.path.join(md, '*.yaml'))
        ok = True
        for f in files:
            print(f"Validating YAML: {f}...")
            try:
                with open(f, 'r') as fh:
                    docs = list(yaml.safe_load_all(fh))
                if not docs:
                    print(f"No YAML documents found in {f}"); ok=False; continue
                for i, doc in enumerate(docs):
                    if not isinstance(doc, dict):
                        print(f"Invalid YAML structure in {f} (document {i+1})"); ok=False; break
                    if 'apiVersion' not in doc:
                        print(f"Missing apiVersion in {f} (document {i+1})"); ok=False; break
                    if 'kind' not in doc:
                        print(f"Missing kind in {f} (document {i+1})"); ok=False; break
                else:
                    print(f"{f} is valid ({len(docs)} document{'s' if len(docs)>1 else ''})")
            except Exception as e:
                print(f"Error validating {f}: {e}"); ok=False
        if not ok: sys.exit(1)
        print("All Kubernetes manifests are valid!")
        EOF

    # Continuous Deployment Job (Example for production with accessible K8s cluster)
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build-and-push, security-scan, validate-manifests]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Deploy to Kubernetes
  #     run: kubectl apply -f "${MANIFEST_DIR}/"
  

  deploy-notification:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, validate-manifests]
    if: always() && github.event_name != 'pull_request'

    steps:
    - name: Create deployment summary
      run: |
        echo "## Wisecow CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Status:" >> $GITHUB_STEP_SUMMARY
        echo "- **Container Build**: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Manifest Validation**: ${{ needs.validate-manifests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Container Registry:" >> $GITHUB_STEP_SUMMARY
        echo "Image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Ready for Deployment!" >> $GITHUB_STEP_SUMMARY
        echo "The application is ready to be deployed to Kubernetes with TLS." >> $GITHUB_STEP_SUMMARY