name: Wisecow CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test container functionality
      run: |
        # Test the built image works
        docker run --rm -d -p 4499:4499 --name test-wisecow ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        sleep 10
        
        # Test if application responds
        for i in {1..5}; do
          if curl -f http://localhost:4499 | grep -q "cow"; then
            echo "Container test passed"
            docker stop test-wisecow
            exit 0
          fi
          echo "Waiting for application... (attempt $i/5)"
          sleep 5
        done
        
        echo "Container test failed"
        docker logs test-wisecow
        docker stop test-wisecow
        exit 1

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  validate-manifests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Validate Kubernetes manifests
      run: |
          echo "Validating Kubernetes manifests..."
          
          # Simple validation of YAML files
          if [ ! -d "k8s-manifests" ]; then
            echo "k8s-manifests directory not found"
            exit 1
          fi
          
          manifest_files=$(find k8s-manifests -name "*.yaml" -type f)
          if [ -z "$manifest_files" ]; then
            echo "No YAML files found in k8s-manifests/"
            exit 1
          fi
          
          # Install Python YAML library
          pip3 install PyYAML > /dev/null 2>&1 || {
            echo "Warning: Could not install PyYAML, using basic validation"
            # Basic file existence and syntax check
            for manifest in $manifest_files; do
              echo "Basic validation: $manifest..."
              if [ ! -f "$manifest" ]; then
                echo "File not found: $manifest"
                exit 1
              fi
              
              # Check for required fields using grep
              if ! grep -q "apiVersion:" "$manifest"; then
                echo "Missing apiVersion in $manifest"
                exit 1
              fi
              
              if ! grep -q "kind:" "$manifest"; then
                echo "Missing kind in $manifest"
                exit 1
              fi
              
              echo "$manifest passed basic validation"
            done
            echo "All manifests passed basic validation!"
            exit 0
          }
          
          # Full YAML validation with PyYAML
          python3 - <<'EOF'
          import yaml
          import sys
          import glob
          import os
          
          def validate_manifest(file_path):
              print(f"Validating YAML: {file_path}...")
              try:
                  with open(file_path, 'r') as f:
                      docs = list(yaml.safe_load_all(f))
                  
                  if not docs:
                      print(f"No YAML documents found in {file_path}")
                      return False
                  
                  for i, doc in enumerate(docs):
                      if not doc or not isinstance(doc, dict):
                          print(f"Invalid YAML structure in {file_path} (document {i+1})")
                          return False
                          
                      if 'apiVersion' not in doc:
                          print(f"Missing apiVersion in {file_path} (document {i+1})")
                          return False
                          
                      if 'kind' not in doc:
                          print(f"Missing kind in {file_path} (document {i+1})")
                          return False
                      
                  print(f"{file_path} is valid ({len(docs)} document{'s' if len(docs) > 1 else ''})")
                  return True
              except Exception as e:
                  print(f"Error validating {file_path}: {e}")
                  return False
          
          manifest_files = glob.glob('k8s-manifests/*.yaml')
          all_valid = True
          for manifest in manifest_files:
              if not validate_manifest(manifest):
                  all_valid = False
          
          if all_valid:
              print("All Kubernetes manifests are valid!")
          else:
              sys.exit(1)
          EOF

  deploy-notification:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, validate-manifests]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Create deployment summary
      run: |
        echo "## Wisecow CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Status:" >> $GITHUB_STEP_SUMMARY
        echo "- **Container Build**: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Manifest Validation**: ${{ needs.validate-manifests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Container Registry:" >> $GITHUB_STEP_SUMMARY
        echo "Image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Ready for Deployment!" >> $GITHUB_STEP_SUMMARY
        echo "The application is ready to be deployed to Kubernetes with TLS." >> $GITHUB_STEP_SUMMARY
